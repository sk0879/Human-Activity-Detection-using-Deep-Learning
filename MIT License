
---

### **2. A Script for Inference (e.g., `predict.py`)**
Since you have the pretrained model, others might want to **make predictions** using the model. A script like `predict.py` that shows how to load the model and use it to predict human activity from a video is very helpful.

#### **Example `predict.py` Script:**

```python
import tensorflow as tf
import cv2
import numpy as np
import argparse

# Load the model
def load_model(model_path):
    model = tf.keras.models.load_model(model_path)
    return model

# Preprocess and predict activity in a video
def predict_activity(model, video_path):
    cap = cv2.VideoCapture(video_path)
    frame_sequence = []
    
    while cap.isOpened():
        success, frame = cap.read()
        if not success:
            break
        
        # Resize and normalize frame
        frame_resized = cv2.resize(frame, (64, 64))
        frame_sequence.append(frame_resized / 255.0)
        
        if len(frame_sequence) == 30:  # Process in chunks of 30 frames
            input_data = np.expand_dims(frame_sequence, axis=0)  # Add batch dimension
            prediction = model.predict(input_data)
            predicted_class = np.argmax(prediction)
            print(f"Predicted Activity: Class {predicted_class}")
            frame_sequence = []
    
    cap.release()

# Command-line interface for ease of use
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Predict human activity from video.")
    parser.add_argument("--video_path", type=str, required=True, help="Path to the video file.")
    parser.add_argument("--model_path", type=str, default="models/activity_model.h5", help="Path to the pretrained model.")
    args = parser.parse_args()
    
    model = load_model(args.model_path)
    predict_activity(model, args.video_path)
